
import React from 'react';
import { Button } from '@/components/ui/button';
import { Mail, Loader2 } from 'lucide-react';
import { toast } from 'sonner';

interface EmailSenderProps {
  subject: string;
  content: string;
  imageUrl?: string;
  emailConfig: {
    recipientEmail: string;
    senderEmail: string;
    senderPassword: string;
  };
  onSuccess: () => void;
  loading: boolean;
  setLoading: (loading: boolean) => void;
}

const EmailSender: React.FC<EmailSenderProps> = ({
  subject,
  content,
  imageUrl,
  emailConfig,
  onSuccess,
  loading,
  setLoading
}) => {
  const sendEmail = async () => {
    if (!emailConfig.recipientEmail || !emailConfig.senderEmail || !emailConfig.senderPassword) {
      toast.error('Please fill in all email configuration fields');
      return;
    }

    setLoading(true);
    
    try {
      // Create HTML email content
      const htmlContent = `
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #6366f1; margin-bottom: 10px;">AI Blog Scribe</h1>
            <p style="color: #666; font-size: 14px;">Generated Blog Post</p>
          </div>
          
          ${imageUrl ? `
          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <img src="${imageUrl}" alt="Blog post image" style="width: 100%; height: 200px; object-fit: cover; border-radius: 8px;">
          </div>
          ` : ''}
          
          <div style="line-height: 1.6; color: #333;">
            ${content.replace(/\n/g, '<br>')}
          </div>
          
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #666; font-size: 12px;">
            <p>Generated by AI Blog Scribe</p>
            <p>Powered by Google Gemini AI</p>
          </div>
        </div>
      `;

      // Since we can't actually send emails from the frontend without a backend,
      // we'll show the user that they need to set up the GitHub Actions automation
      // or use a proper backend service
      
      console.log('Email Configuration:', {
        to: emailConfig.recipientEmail,
        from: emailConfig.senderEmail,
        subject: subject,
        htmlContent: htmlContent
      });
      
      // Simulate email sending for demo purposes
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      toast.success(`Email would be sent to ${emailConfig.recipientEmail}. For actual email sending, use the GitHub Actions automation.`);
      toast.info('Check the console for email details and set up GitHub Actions for real automation.');
      
      onSuccess();
      
    } catch (error) {
      console.error('Error preparing email:', error);
      toast.error('Failed to prepare email. Check console for details.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Button 
      onClick={sendEmail}
      disabled={loading}
      className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600"
    >
      {loading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Mail className="h-4 w-4 mr-2" />}
      Send via Email
    </Button>
  );
};

export default EmailSender;
